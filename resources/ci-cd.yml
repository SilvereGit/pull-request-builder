##
## @doc 
##   common resources required for serverless ci/cd
AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless CI/CD resources

Parameters:
  GithubToken:
    Description: Github api token
    Type: String

Outputs:
  AccessKeyId:
    Value:
      Ref: ReAccessKey
    Description: The IAM AccessKeyId
  SecretAccessKey:
    Value:
      Fn::GetAtt:
      - ReAccessKey
      - SecretAccessKey
    Description: The IAM AccessSecretKey
  AwsRegion:
    Value: !Ref "AWS::Region"
  SNSTopic:
    Value: 
      Ref: ReTopic
  GitHubToken:
    Value: 
      Ref: GithubToken


Resources:

  ReInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: ReCodeBuildRole

  ReCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ci-cd
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.us-east-1.amazonaws.com
                - codebuild.us-west-2.amazonaws.com
                - codebuild.eu-west-1.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: codebuild-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: Allow
                Action:
                  - sns:*
                Resource:
                  - Ref: ReTopic
              - Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"

                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"

                  - "ecr:GetAuthorizationToken"
                  - "ecr:CreateRepository"
                  - "ecr:SetRepositoryPolicy"
                Resource: 
                  - "*"

  ReUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub ${AWS::StackName}-user
      Path: "/"
      Policies:
      - PolicyName:
          !Sub ${AWS::StackName}-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
              Ref: ReTopic

  ReAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: ReUser

  ReTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${AWS::StackName}
      TopicName: !Sub ${AWS::StackName}
      Subscription:
      - Endpoint:
          Fn::GetAtt:
            - ReLambda
            - Arn
        Protocol: lambda

  ReLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}
      Handler: index.handler
      Role: !GetAtt [IamRoleLambda, Arn]
      Code:
        ZipFile:
          exports.handler = function(event, context, cb) { return cb(null, {message:'Hello World'}); };
      Environment:
        Variables:
          GITHUB_TOKEN:
            Ref: GithubToken
      Runtime: nodejs4.3
      MemorySize: 1024
      Timeout: 30

  IamRoleLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Sub ${AWS::StackName}-role-lambda
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  IamPolicyLambda:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        !Sub ${AWS::StackName}-lambda
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            !Sub arn:aws:logs:${AWS::Region}:*:*
        - Effect: Allow
          Action:
          - codebuild:*
          Resource: "*"
      Roles:
      - Ref: IamRoleLambda

  ReLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: ReTopic
      FunctionName:
        Fn::GetAtt:
        - ReLambda
        - Arn

  CodeBuildPrivateKey:
    Type: AWS::KMS::Key
    Properties:
      Description:
        The KMS key to encrypt/decrypt sensitive information
      KeyPolicy:
        Id: ci-cd-private-key-policy
        Version: 2012-10-17
        Statement:
        - Sid: Allow access for Key Administrators
          Effect: Allow
          Principal:
            AWS:
            - !Sub arn:aws:iam::${AWS::AccountId}:role/SAML-User
          Action:
            - "kms:Create*"
            - "kms:Describe*"
            - "kms:Enable*"
            - "kms:List*"
            - "kms:Put*"
            - "kms:Update*"
            - "kms:Revoke*"
            - "kms:Disable*"
            - "kms:Get*"
            - "kms:Delete*"
            - "kms:TagResource"
            - "kms:UntagResource"
            - "kms:ScheduleKeyDeletion"
            - "kms:CancelKeyDeletion"
            - "kms:Encrypt"
            - "kms:Decrypt"
            - "kms:ReEncrypt*"
            - "kms:GenerateDataKey*"
            - "kms:DescribeKey"
          Resource: "*"

        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS:
            - !Sub arn:aws:iam::${AWS::AccountId}:role/ci-cd
          Action:
            - "kms:Encrypt"
            - "kms:Decrypt"
            - "kms:ReEncrypt*"
            - "kms:GenerateDataKey*"
            - "kms:DescribeKey"
          Resource: "*"


  CodeBuildPrivateKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: ci-cd/codebuild-private-key
      TargetKeyId:
        Ref: CodeBuildPrivateKey
