##
## @doc 
##   common resources required for serverless ci/cd
AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless CI/CD resources

Parameters:
  Artifact:
    Description: CI/CD artifcat storage
    Type: String

  GithubToken:
    Description: Github api token
    Type: String

Outputs:
  GitHubToken:
    Value: 
      Ref: GithubToken
  WebHook:
    Value: !Sub https://${WebHookApi}.execute-api.${AWS::Region}.amazonaws.com/webhook


Resources:

  ReInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: ReCodeBuildRole

  ReCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ci-cd
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.us-east-1.amazonaws.com
                - codebuild.us-west-2.amazonaws.com
                - codebuild.eu-west-1.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codebuild-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"

                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"

                  - "ecr:GetAuthorizationToken"
                  - "ecr:CreateRepository"
                  - "ecr:SetRepositoryPolicy"
                Resource: 
                  - "*"

  ReLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}
      Handler: index.handler
      Role: !GetAtt [IamRoleLambda, Arn]
      Code:
        S3Bucket: !Sub ${Artifact}
        S3Key: ci-cd/package.zip
      Environment:
        Variables:
          GITHUB_TOKEN: !Sub ${GithubToken}
      Runtime: nodejs8.10
      MemorySize: 1024
      Timeout: 30

  IamRoleLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Sub ${AWS::StackName}-role-lambda
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  IamPolicyLambda:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        !Sub ${AWS::StackName}-lambda
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            !Sub arn:aws:logs:${AWS::Region}:*:*
        - Effect: Allow
          Action:
          - codebuild:*
          Resource: "*"
      Roles:
      - Ref: IamRoleLambda

  WebHookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-webhook-api
      Description: WebHook API for CI/CD
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        swagger: "2.0"
        info:
          version: "2018-05-28T10:11:59Z"
          title: "WebHook CI/CD"
        basePath: "/webhook"
        schemes:
          - "https"
        paths:
          /:
            post:
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri: 
                  Fn::Join:
                    - ""
                    -
                      - !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
                      - Fn::GetAtt:
                        - ReLambda
                        - Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

  WebHookDeployment: 
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WebHookApi
      StageName: webhook

  ReLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join: 
          - "" 
          -
            - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:"
            - !Ref WebHookApi
            - "/*"
      FunctionName:
        Fn::GetAtt:
        - ReLambda
        - Arn
